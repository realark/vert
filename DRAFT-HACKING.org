* WORK IN PROGRESS
This document is a work in progress. Please do not take it seriously.
* Units
** Distance
Distance units are measured in pixels.

Note that these pixels may be scaled up or down when rendered to fit on various screens.
** Time
Unless otherwise stated in the variable name, all time units are assumed to be milliseconds.

#+BEGIN_SRC lisp
*start-time* ; assumed to be milliseconds
*start-time-ms* ; explicitly milliseconds
*start-time-seconds* ; explicitly seconds
#+END_SRC
*** Wallclock time
TICKS and TICKS-NANOS return a millisecond and nanosecond timestamp respectively. This timestamp begins counting from an arbitrary point in time.

#+BEGIN_SRC lisp
(ticks) ; -> ms timestamp
(ticks-nanos) ; -> nanosecond timestamp
#+END_SRC
*** Scene Time / Game Time
The amount of wallclock time passed will often not equal the amount of "game time" elapsed. For example, if the game is paused while an attack is charging, the amount of time paused must not affect the game-object's charge time.

Each scene has a SCENE-TICKS function, which returns the amount of milliseconds of update time elapsed since the scene began updating.

You will almost always want to use SCENE-TICKS to implement in-game timers.
#+BEGIN_SRC lisp
;; *scene* begins running
(scene-ticks *scene*) ; -> 0
;; 4 seconds of game time have elapsed
(scene-ticks *scene*) ; -> 4000
;; game is paused for 5 minutes, then unpaused
;; *scene* internal timer is the same because it was not recieveing updates while paused.
(scene-ticks *scene*) ; -> 4000
#+END_SRC
* Event System
** scratch
#+BEGIN_SRC lisp
  ;; Goals:
  ;; - object instance can subscribe to another object instance
  ;;   - e.g. scene subscribes to objects getting killed
  ;; - object instance can subscribe to a type of event
  ;;   - e.g. scene subscribes to a screen resize and pauses itself
  ;; - anonymous callbacks to events
  ;;   - e.g. on-engine-start event, set up the resource-autoloader

  (publish-event GAME-WINDOW-RESIZED)
  (publish-event GAME-WINDOW-MOVED)


  ;;;; api

  ;; first you define the event and a docstring.
  (defevent game-window-resized
      "Vert's game window has been resized.")

  ;; now any lisp object can publish that event
  (event-publish game-window-resized *engine-manager*)
  (event-publish game-window-resized *player*) ; not that the player publishing window resize events make sense...

  ;; ways to handle events

  ;; 1. manually iterate all events and run desired action
  (do-events (event-name event-publisher)
    'dispatch-on-event)

  ;; 2. define an anonymous handler for named events
  (defevent-handler-lambda game-window-resized (publisher)
    'body)

  ;; 3. add a handler for specific pub/sub instances
  (defevent-handler game-window-resized ((pub pub-class) (sub sub-class))
    ;; handler will run for all SUBs which have EVENT-SUBSCRIBE'd to PUBs
    ...)
  (event-subscribe game-window-resized *engine-man* *graphics-hlpr*)

  ;;;; implementation

  (defun event-publish (publisher event-name-symbol)
    "Have PUBLISHER publish an event named EVENT-NAME-SYMBOL"
    ...)

  (defclass event ()
    ((name :initarg :name
           :type symbol
           :initform (error ":name required"))
     (publisher :initform 'required)))

  (defparameter *pending-events*
    (make-some-array)
    "Events which will be published next frame.")

  (defparameter *event-bus*
    (make-some-array)
    "Events which have been published in the previous update frame.")

  (defun publish-event (event-name-symbol &rest event-args)
    ;; make or reuse an event-node?
    ;; push event name and all args to pending-events
    )

  ;;;; event api

  ;; define a type of event
  (defevent game-window-resized (old-width old-height new-width new-height)
      "docstring")

  ;; next frame run the game-window-resized event
  (publish-event game-window-resized 100 75 200 150)

  ;; how sprites will react to window resizes
  (defevent-callback game-window-resized ((sprite static-sprite) old-width old-height new-width new-height)
    )

  ;; function which runs every time the window is resized
  (on-event game-window-resized (old-width old-height new-width new-height)
    (log:info "game window resized"))

  ;; TODO how to subscribe to a particular instance

  (progn

    (add-subscriber wolf other-wolf 'howling
      (howl other-wolf)
      )

    )
#+END_SRC
** Adding an anonymous event handler
** Subscribing to Events from a specific instance
* Vert Systems
** Config
*** Interesting Globals
** Graphics
Graphics use OpenGL 3.3.1. The window and gl-context are created by sdl2 (see sdl-engine-manager for implementation).

# *** Rendering Pipeline
# - each game scene stores a self-sorting render-queue
#   - The sorting is used render items with a lower Z value first
#   - Other custom sortings may be defined
# - For every update frame, objects inside the camera are added to the render-queue
# - Set up a scene-FBO
#   - if no post-process, use default FBO
#   - otherwise use a custom FBO
# - For the render frame, the render-queue is iterated and RENDER is called on each object
# - RENDER does the following
#   - set up object-FBO
#     - if no effects, use a custom FBO
#     - otherwise use scene-FBO
#   - render base object local space into the object-FBO texture
#   - for each render effect:
#     - copy object-FBO into tmp-FBO
#     - feed tmp-FBO into the effect as the source texture
#     - write output to object-FBO
#   - finally
#     - run matrix transformations and interpolations
#     - if effects ran, write the object-FBO into the scene-FBO
*** Rendering Overview
Rendering is handled by providing the RENDER method.

To render a specific game-component, implement the RENDER method.
#+BEGIN_SRC lisp
(defclass my-component (game-object)
  ())

(defmethod render ((object my-component))
  ;; modifications to the gl context go here
  )
#+END_SRC

RENDER will be called for every visible object once per render frame.
*** Post-Process Effects
To modify an entire scene a post-process effect may be added to the scene.

Each post-process effect defines an input and output FBO. The scene will render into the input-texture and pass the output-fbo to the next effect's input-texture. When it reaches the final effect the output will be sent to opengl's final output buffer.

As with game-object components, each post-process-effect is implemented by specializing the RENDER method.

#+BEGIN_SRC lisp
(defclass blur-effect (post-process-effect) ())

(scene-add-post-process-effect *scene*
                               (make-instance 'blur-effect
                                              ;; numbers are gl ids
                                              :input-texture 1
                                              :output-fbo 2))

(defmethod render ((effect blur-effect))
  ;; modifications to the gl context go here
  )
#+END_SRC

*** OpengGL Utils
- The gl-utils file contains classes to represent opengl objects
  - gl-context
  - shader
  - texture
  - non-consing cl-opengl functions

gl-drawable
- effects-pipeline
  - pre-render
  - post-render

scene
- effects-pipeline ; runs on entire image
*** Built-in Drawing components
** Audio
** Caches
** Resource Autloader
** Everything else
* Game-Object and Scene
** Game-Object
** Game Components
*** Transform
*** 2D Physics
*** Sprite Rendering
*** Font Rendering
*** Instanced Sprite Rendering
*** State Machine util
** Components which load external resources
Scenario: your game component requires external resources (CFFI array, opengl bits, sfx bits).

Your component must:
1. Not attempt to load these bits when initialized. You should be able to create your component without a game window, gl-context, audio buffer, etc.
2. When the engine starts, load the appropriate resources
3. When the engine stops, release the appropriate resources
4. When the component is dereferenced, release the appropriate resources before the engine shuts down

*** Recommended Approach
How resources are managed is ultimately up to the component developer, but it is highly recommended to do the following:
1. Hook LOAD-RESOURCES and RELEASE-RESOURCES for your component (either use an :AROUND, :AFTER, or simpley CALL-NEXT-METHOD)
2. When the object is initialized, register it with the *RESOURCE-AUTOLOADER*
3. When the object's resources are loaded, use the RESOURCE-RELEASER util to add a finalizer to the object's resources if it is dereferenced
4. When the object's resources are released, cancel the resource releaser

As an example, we'll consider a bomb component. This is a contrived example for educational purposes. In practice the rendering and audio logic would be broken out into simpler utility components which manage the underlying bits.
#+BEGIN_SRC lisp
  (defclass bomb (game-object)
    ((releaser :initform nil)
     (spritesheet :initform nil)
     (explode-sfx :initform nil)))))

     ;; Note: Hooking :AROUND so that all initializations are complete before resource-autoloader potentially call LOAD-RESOURCES
  (defmethod initialize-instance :around ((bomb bomb) &rest args)
    (declare (optimize (speed 3)))
    (let ((all-args (append (list bomb) args)))
      (prog1 (apply #'call-next-method all-args)
        (resource-autoloader-add-object *resource-autoloader*
                                        (tg:make-weak-pointer bomb)))))

  (defun %release-bomb-resources (spritesheet explode-sfx)
    (release-spritesheet spritesheet)
    (release-sfx explode-sfx))

  (defmethod load-resources ((bomb bomb))
    ;; first make sure parent loading works
    (prog1 (call-next-method bomb)
      (unless (slot-value bomb 'releaser)
        (let ((spritesheet (make-spritesheet *gl-context* (resource-path "./art/bomb.png")))
              (explode-sfx (make-sfx *audio* (resource-path "./sfx/explode.wav"))))
          (setf (slot-value bomb 'spritesheet) spritesheet
                (slot-value bomb 'explode-sfx) explode-sfx
                (slot-value bomb 'releaser)
                ;; Note that passing BOMB in the first arg will NOT create a hard ref.
                ;; Whatever is passed there is convereted to a string for logging purposes. No hard refs will be created.
                ;; Using BOMB in the body, on the other hand, WILL create a hard ref and must not be done.
                (make-resource-releaser (bomb)
                  (%release-bomb-resources spritesheet explode-sfx)))))))

  (defmethod release-resources ((bomb bomb))
    (with-slots (releaser spritesheet explode-sfx) bomb
      (prog1 (call-next-method bomb)
        (when releaser
          (%release-bomb-resources spritesheet explode-sfx)
          (cancel-resource-releaser releaser)
          (setf releaser nil
                spritesheet nil
                explode-sfx nil)))))
#+END_SRC
** Scene
A scene is something which can be rendered and updated, just like a game-object. There is only one active scene, which is updated and rendered in the main game loop.

The active scene may be accessed with the *SCENE* variable. To change, call the CHANGE-SCENE fn.
*** GAME-SCENE
A game-scene holds a collection of GAME-OBJECTs, calls UPDATE and RENDER, and provides an api to access objects in the scene in an efficient manner.
*** Menu
Renders a menu. A tree of text nodes with one active node at a time, which may be selected.

Leaf nodes run user-defined actions when selected.
*** Pause Scene
A scene which holds another scene. This other scene is rendered after the pause-scene, but not updated.
*** Overlays
Overlays are objects which are rendered in the scene in a camera independent manner. Used to implement HUDs.
